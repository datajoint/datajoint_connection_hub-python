version: '2.4'
x-net: &net
  networks:
      - main
services:
  db:
    <<: *net
    image: datajoint/mysql:$MYSQL_VER
    environment:
      - MYSQL_ROOT_PASSWORD=${DJ_PASS}
    # ports:
    #   - "3306:3306"
    # To persist MySQL data
    # volumes:
    #   - ./mysql/data:/var/lib/mysql
    #   - ./mysql/my.cnf:/etc/mysql/my.cnf
  minio:
    <<: *net
    environment:
      - MINIO_ACCESS_KEY=datajoint
      - MINIO_SECRET_KEY=datajoint
    image: minio/minio:$MINIO_VER
    # ports:
    #   - "9000:9000"
    # To persist MinIO data and config
    # volumes:
    #   - ./minio/data:/data
    #   - ./minio/config:/root/.minio
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://minio:9000/minio/health/live"]
      timeout: 5s
      retries: 60
      interval: 1s
  hub:
    extends:
      file: djhub/api/docker-compose.yml
      service: hubapi
    <<: *net
    # ports:
    #   - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
  fakeservices.datajoint.io:
    <<: *net
    image: raphaelguzman/nginx:v0.0.2
    environment:
    - ADD_db_TYPE=DATABASE
    - ADD_db_ENDPOINT=db:3306
    - ADD_minio_TYPE=MINIO
    - ADD_minio_ENDPOINT=minio:9000
    - ADD_minio_PREFIX=/
    - ADD_hub_TYPE=REST
    - ADD_hub_ENDPOINT=hub:5000
    - ADD_hub_PREFIX=/api
    ports:
      - "443:443"
      - "3306:3306"
      - "5000:5000"
      - "9000:9000"
    depends_on:
      db:
        condition: service_healthy
      hub:
        condition: service_started
  app:
    <<: *net
    image: datajoint/pydev:${PY_VER}-alpine${ALPINE_VER}
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      fakeservices.datajoint.io:
        condition: service_healthy
      hub:
        condition: service_started
    environment:
      - TWINE_USERNAME
      - TWINE_PASSWORD
      - DJ_HOST=fakeservices.datajoint.io
      - DJ_USER
      - DJ_PASS
      - DJ_TEST_HOST=fakeservices.datajoint.io
      - DJ_TEST_USER=datajoint
      - DJ_TEST_PASSWORD=datajoint
      # If running tests locally, make sure to add entry in /etc/hosts for 127.0.0.1 fakeservices.datajoint.io
      - S3_ENDPOINT=fakeservices.datajoint.io:9000
      - S3_ACCESS_KEY=datajoint
      - S3_SECRET_KEY=datajoint
      - S3_BUCKET=datajoint-test
      - PYTHON_USER=dja
      - JUPYTER_PASSWORD=datajoint
      - DISPLAY
    working_dir: /src
    command: >
      /bin/sh -c
       "
        mkdir /home/dja/datajoint-python;
        git clone -b plugin --single-branch https://github.com/guzman-raphael/datajoint-python.git /home/dja/datajoint-python
        pip install --user nose nose-cov coveralls ptvsd twine /home/dja/datajoint-python . ./djhub/api;
        pip freeze | grep datajoint;
        ## You may run the below tests once sh'ed into container i.e. docker exec -it datajoint-python_app_1 sh        
        # nosetests -vs --tests=/home/dja/datajoint-python/tests; #run DataJoint's tests
        # nosetests -vsw tests; #run plugin tests
        # nosetests -vs --tests=tests.test_external_class:test_insert_and_fetch; #run specific basic test
        # nosetests -vs --tests=tests.test_fetch:TestFetch.test_getattribute_for_fetch1; #run specific Class test
        ## Interactive Jupyter Notebook environment
        jupyter notebook &
        ## Remote debugger
        while true;
        do python -m ptvsd --host 0.0.0.0 --port 5678 --wait .;
        sleep 2;
        done;
       "
    ports:
      - "8888:8888"
      - "5678:5678"
    user: ${UID}:${GID}
    volumes:
      - .:/src
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ~/Documents/keys/datajoint-dev.pem:/home/dja/keys/datajoint-dev.pem:ro
      # Additional mounted notebooks may go here
networks:
  main:
